module qonquest2.sdl;

macro import std.macro.cimport;
import c_header("GL/gl.h");
import c_header("GL/glut.h");
import c_header("SDL2/SDL_image.h");

import std.string;

import qonquest2.base;
import qonquest2.util;

pragma(lib, "GL");
pragma(lib, "glut");
pragma(lib, "SDL2");
pragma(lib, "SDL2_image");

alias CHAR_SIZE = 16; /// character size

enum MouseEventType {
    buttonPressed,
    buttonReleased,
    motion,
}

struct MouseEvent {
    MouseEventType type;
    MouseButton button;
    int x;
    int y;
}

/// A single character in the font
struct Char {
    bool[] pixels; /// Pixels of this character
    int fontSpacing; /// Width of this character (used in `text()`)
    /// Renders this character at the given position (must be called within redrawOpenGlScene)
    void render(float x, float y, float scale = 1, Color3f col = Color3f(1, 1, 1), bool drawOutline = false) {
        glBegin(GL_QUADS);
        if(drawOutline) {
            glColor3f(0, 0, 0);
            for (i in 0 .. CHAR_SIZE) {
                for (j in 0 .. CHAR_SIZE) {
                    if(!pixels[i * CHAR_SIZE + j])
                        continue;
                    alias OUTLINE_SIZE = 1;
                    glVertex2f(x+i*scale-OUTLINE_SIZE,       y+j*scale-OUTLINE_SIZE      );
                    glVertex2f(x+i*scale+scale+OUTLINE_SIZE, y+j*scale                   );
                    glVertex2f(x+i*scale+scale+OUTLINE_SIZE, y+j*scale+scale+OUTLINE_SIZE);
                    glVertex2f(x+i*scale-OUTLINE_SIZE,       y+j*scale+scale+OUTLINE_SIZE);
                }
            }
        }
        col.draw;
        for (i in 0 .. CHAR_SIZE) {
            for (j in 0 .. CHAR_SIZE) {
                if(!pixels[i * CHAR_SIZE + j])
                    continue;
                glVertex2f(x+i*scale,       y+j*scale      );
                glVertex2f(x+i*scale+scale, y+j*scale      );
                glVertex2f(x+i*scale+scale, y+j*scale+scale);
                glVertex2f(x+i*scale,       y+j*scale+scale);
            }
        }
        glEnd();
    }
}

class Font {

    Char[] characters; /// Characters in the font

    this() { }

    void load() {
        // load font

        SDL_Surface* fontImage = IMG_Load("data/font.png");
        if (!fontImage) {
            die("couldn't load data/font.png: $(SDL_GetError.cToString)");
        }
        import std.algorithm;
        import std.file;
        import std.string;
        int[] fontSpacing = readText("data/font-spacing.txt")[0..$-1].split("\n").map(x => atoi(x)).array;
        for (i in 0 .. fontImage.w/CHAR_SIZE) {
            for (j in 0 .. fontImage.h/CHAR_SIZE) {
                int x = j*CHAR_SIZE;
                int y = i*CHAR_SIZE;
                mut Char c;
                int bpp = fontImage.format.BytesPerPixel;
                // there's probably a better way to do this than four nested for loops
                for (k in 0 .. CHAR_SIZE) {
                    for (l in 0 .. CHAR_SIZE) {
                        auto pixel = &(cast(ubyte*) fontImage.pixels)[(y + l) * fontImage.pitch + (x + k) * bpp];
                        c.pixels ~= pixel[0] == 0;
                    }
                }
                if(characters.length < fontSpacing.length)
                    c.fontSpacing = fontSpacing[characters.length];
                characters ~= c;
            }
        }
    }
}

private int parseHex(string fragment) {
    int parseHex(char ch) {
        if ('0' <= ch && ch <= '9') return ch - '0';
        if ('A' <= ch && ch <= 'F') return ch - 'A' + 10;
        if ('a' <= ch && ch <= 'f') return ch - 'a' + 10;
        die("not a hex code '$fragment'");
    }
    return parseHex(fragment[0]) * 16 + parseHex(fragment[1]);
}

pragma(lib, "m");

/// A color with 3 floats
struct Color3f {
    float r; /// Red
    float g; /// Green
    float b; /// Blue
    /// Create from components
    this(float r, float g, float b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
    /// Create from a hex string
    this(string hex) {
        if(hex.length != 6)
            return;
        r = hex[0..2].parseHex / 256.0f;
        g = hex[2..4].parseHex / 256.0f;
        b = hex[4..6].parseHex / 256.0f;
    }
    this(Color color) {
        this.r = color.r / 256.0f;
        this.g = color.g / 256.0f;
        this.b = color.b / 256.0f;
    }

    /// Runs glColor3f on this color
    void draw() {
        glColor3f(r, g, b);
    }
    /// Returns the inverse of this color
    Color3f inverse() {
        return Color3f(1-r, 1-g, 1-b);
    }
    /// Multiplies colors by a given amount
    Color3f mul(float n) {
        return Color3f(r*n, g*n, b*n);
    }

    string toString() => "($r, $g, $b)";

    /// Converts this color to a hex string
    string toHexString() {
        auto str = "0123456789ABCDEF";
        string hex(int i) => "" ~ str[i / 16] ~ str[i % 16];
        string hexf(float f) => hex(cast(int) floor(f * 256.0f));
        return hexf(r) ~ hexf(g) ~ hexf(b);
    }
}

/// Draws a rectangle at the given position
void rect(float x, float y, float w, float h, int mode = GL_QUADS) {
    glBegin(mode);
    glVertex2f(x,   y  );
    glVertex2f(x+w, y  );
    glVertex2f(x+w, y+h);
    glVertex2f(x,   y+h);
    glEnd();
}

/// Renders a string center-aligned
void textCenter(Font font, string s, float x, float y, float scale = 1, Color3f col = Color3f(0, 0, 0),
    bool drawOutline = false)
{
    text(font, s, x-(textLen(font, s, scale)/2), y, scale, col, drawOutline);
}

// TODO std.uni
struct ByUnicode {
    string text;
    int size() {
        if (text[0] < 0b1000_0000) return 1;
        if (text[0] < 0b1110_0000) return 2;
        if (text[0] < 0b1111_0000) return 3;
        return 4;
    }
    bool empty() => text.empty;
    int front() {
        if (text[0] < 0b1000_0000) return text[0];
        if (text[0] < 0b1110_0000) return text[0] & 0x1f << 6 | text[1] & 0x3f;
        if (text[0] < 0b1111_0000) return text[0] & 0x0f << 12 | text[1] & 0x3f << 6 | text[2] & 0x3f;
        return text[0] & 0x07 << 18 | text[1] & 0x3f << 12 | text[2] & 0x3f << 6 | text[3] & 0x3f;
    }
    ByUnicode next() {
        return ByUnicode(text[size .. $]);
    }
}

/// Length of text in pixels
float textLen(Font font, string s, float scale = 1) {
    mut float len = 0;
    for (c in ByUnicode(s))
        len += font.characters[c].fontSpacing*scale;
    return len;
}

/// Renders a string at the given position
void text(Font font, string s, mut float x, mut float y, float scale = 1, mut Color3f col = Color3f(0, 0, 0),
    bool drawOutline = false)
{
    mut string colorCode;
    mut bool getColorCode;
    mut bool doOutline = false;
    float orgx = x;
    for (i, c in ByUnicode(s)) {
        if (c == '`') {
            getColorCode = true;
            colorCode = "";
            continue;
        } else if (c == '\n') {
            x = orgx;
            y += CHAR_SIZE*scale;
            continue;
        } else if (c == 'o') {
            if(getColorCode) {
                getColorCode = false;
                doOutline = !doOutline;
                continue;
            }
        }
        if(getColorCode) {
            colorCode ~= cast(char) c;
            if(colorCode.length != 6)
                continue;
            getColorCode = false;
            col = Color3f(colorCode);
            continue;
        }
        auto ch = font.characters[c];
        ch.render(x, y, scale, col, drawOutline != doOutline);
        x += scale*ch.fontSpacing;
    }
}

float randf() => rand % 1000 / 1000.0f;
